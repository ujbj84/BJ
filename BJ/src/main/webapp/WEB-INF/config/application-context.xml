<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://mybatis.org/schema/mybatis-spring 
        http://mybatis.org/schema/mybatis-spring.xsd">
        
  <!-- DataSource, DAO, SqlSessionFactory, Transaction 객체를 준비하기 위해
       빈을 찾는 장소를 지정한다.
       단, 페이지 컨트롤러는 제외한다. -->
	<context:component-scan base-package="com.BJ.alba">
	   <context:exclude-filter type="regex" expression="com.BJ.alba.web.*"/>
	</context:component-scan>
	
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/java67db"/>
	
	
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	    <property name="url" value="jdbc:mysql://localhost:3306/java67db"/>
	    <property name="username" value="java67"/>
	    <property name="password" value="java67"/>
	</bean> -->

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionFactory" 
	       class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" 
		          value="net.totalCloud.DDalki.domain" />
		<property name="mapperLocations" 
		          value="classpath*:net.totalCloud.DDalki/dao/*Dao.xml" />
	</bean>
	
	<!-- DAO 인터페이스를 분석하여 DAO 구현체를 자동으로 만들고,
	     SQL 파일에 연결해주는 관리자 등록하기 -->
	<!-- 등록방법1. 직접 관리 객체 등록하기 -->   
	<!--    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="net.bitacademy.java67.dao" />
  </bean>
  -->
  
  <!-- 등록방법1. mybatis 전용 태그를 사용하기 -->
  <mybatis:scan base-package="com.BJ.alba.dao" />
  
   <!-- 페이지 컨트롤러를 찾아서 생성한다. -->
  <context:component-scan base-package="com.BJ.alba.web" />

  <!-- @RequestMapping 등의 애노테이션을 처리할 BeanPostProcessor를 등록하라! -->
  <mvc:annotation-driven />
  
  <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    <property name="mediaTypes">
        <map>
            <entry key="atom" value="application/atom+xml"/>
            <entry key="html" value="text/html"/>
            <entry key="json" value="application/json"/>
        </map>
    </property>
    <property name="viewResolvers">
        <list>
            <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
            <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                <property name="prefix" value="/WEB-INF/views/"/>
                <property name="suffix" value=".jsp"/>
            </bean>
        </list>
    </property>
    <property name="defaultViews">
        <list>
            <!-- 페이지 컨트롤러가 리턴하는 객체를 JSON 문자열로 만들어 클라이언트로 보낸다. -->
            <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
        </list>
    </property>
</bean>

  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="10000000"/>
  </bean>
</beans>





























